<%
# ===================================
# DATA
# ===================================

@options = {
  'General' => {
    'mode' => {
      'desc' => "Type of transition between slides",
      'default' => "'horizontal'",
      'options' => "'horizontal', 'vertical', 'fade'"
    },
    'speed' => {
      'desc' => "Slide transition duration (in ms)",
      'default' => "500",
      'options' => "integer"
    },
    'slideMargin' => {
      'desc' => "Margin between each slide",
      'default' => "0",
      'options' => "integer"
    },
    'startSlide' => {
      'desc' => "Starting slide index (zero-based)",
      'default' => "0",
      'options' => "integer"
    },
    'slideSelector' => {
      'desc' => "Element to use as slides (ex. <code>'div.slide'</code>).<br />Note: by default, bxSlider will use all immediate children of the slider element",
      'default' => "''",
      'options' => "jQuery selector"
    },
    'infiniteLoop' => {
      'desc' => "If <code>true</code>, clicking \"Next\" while on the last slide will transition to the first slide and vice-versa",
      'default' => "true",
      'options' => "boolean (true / false)"
    },
    'hideControlsOnEnd' => {
      'desc' => "If <code>true</code>, \"Next\" control will be hidden on last slide and vice-versa<br/>Note: Only used when <code>infiniteLoop: false</code>",
      'default' => "false",
      'options' => "boolean (true / false)"
    },
    'easing' => {
      'desc' => "The type of \"easing\" to use during transitions. Include <code>plugins/jquery.easing.1.3.js</code> for many options.<br />See <a href=\"http://gsgd.co.uk/sandbox/jquery/easing/\" target=\"_blank\">http://gsgd.co.uk/sandbox/jquery/easing/</a> for more info",
      'default' => "'swing'",
      'options' => "'swing', 'linear' (see the above file for more options)"
    },
    'captions' => {
      'desc' => "Include image captions. Captions are derived from the image's <code>title</code> attribute",
      'default' => "false",
      'options' => "boolean (true / false)"
    },
    'ticker' => {
      'desc' => "Use slider in ticker mode (similar to a news ticker)",
      'default' => "false",
      'options' => "boolean (true / false)"
    },
    'tickerHover' => {
      'desc' => "Ticker will pause when mouse hovers over slider",
      'default' => "false",
      'options' => "boolean (true / false)"
    },
    'adaptiveHeight' => {
      'desc' => "Dynamically adjust slider height based on each slide's height",
      'default' => "false",
      'options' => "boolean (true / false)"
    },
    'adaptiveHeightSpeed' => {
      'desc' => "Slide height transition duration (in ms). Note: only used if <code>adaptiveHeight: true</code>",
      'default' => "500",
      'options' => "integer"
    },
    'touchEnabled' => {
      'desc' => "If <code>true</code>, slider will allow touch swipe transitions",
      'default' => "true",
      'options' => "boolean (true / false)"
    },
    'swipeThreshold' => {
      'desc' => "Amount of pixels a touch swipe needs to exceed in order to execute a slide transition. Note: only used if <code>touchEnabled: true</code>",
      'default' => "500",
      'options' => "integer"
    },
    'video' => {
      'desc' => "If any slides contain video, set this to <code>true</code>. Also, include <code>plugins/jquery.fitvids.js</code><br />See <a href=\"http://fitvidsjs.com/\" target=\"_blank\">http://fitvidsjs.com/</a> for more info",
      'default' => "false",
      'options' => "boolean (true / false)"
    }
  },
  'Pager' => {
    'pager' => {
      'desc' => "If <code>true</code>, a pager will be added",
      'default' => "true",
      'options' => "boolean (true / false)"
    },
    'pagerType' => {
      'desc' => "If <code>'full'</code>, a pager link will be generated for each slide. If <code>'short'</code>, a x / y pager will be used (ex. 1 / 5)",
      'default' => "'full'",
      'options' => "'full', 'short'"
    },
    'pagerShortSeparator' => {
      'desc' => "If <code>pagerType: 'short'</code>, pager will use this value as the separating character",
      'default' => "' / '",
      'options' => "string"
    },
    'pagerSelector' => {
      'desc' => "Element used to populate the populate the pager. By default, the pager is appended to the bx-viewport",
      'default' => "''",
      'options' => "jQuery selector"
    },
    'pagerCustom' => {
      'desc' => "Parent element to be used as the pager. Parent element must contain a <code>&lt;a data-slide-index=\"x\"&gt;</code> element for each slide. See example <a href=\"/examples/thumbnail-method-1\">here</a>. Not for use with dynamic carousels.",
      'default' => "null",
      'options' => "jQuery selector"
    },
    'buildPager' => {
      'desc' => "If supplied, function is called on every slide element, and the returned value is used as the pager item markup.<br />See <a href=\"http://bxslider.com/examples\">examples</a> for detailed implementation",
      'default' => "null",
      'options' => "function(slideIndex)"
    }
  },
  'Controls' => {
    'controls' => {
      'desc' => "If <code>true</code>, \"Next\" / \"Prev\" controls will be added",
      'default' => "true",
      'options' => "boolean (true / false)"
    },
    'nextText' => {
      'desc' => "Text to be used for the \"Next\" control",
      'default' => "'Next'",
      'options' => "string"
    },
    'prevText' => {
      'desc' => "Text to be used for the \"Prev\" control",
      'default' => "'Prev'",
      'options' => "string"
    },
    'nextSelector' => {
      'desc' => "Element used to populate the \"Next\" control",
      'default' => "null",
      'options' => "jQuery selector"
    },
    'prevSelector' => {
      'desc' => "Element used to populate the \"Prev\" control",
      'default' => "null",
      'options' => "jQuery selector"
    },
    'autoControls' => {
      'desc' => "If <code>true</code>, \"Start\" / \"Stop\" controls will be added",
      'default' => "false",
      'options' => "boolean (true / false)"
    },
    'startText' => {
      'desc' => "Text to be used for the \"Start\" control",
      'default' => "'Start'",
      'options' => "string"
    },
    'stopText' => {
      'desc' => "Text to be used for the \"Stop\" control",
      'default' => "'Stop'",
      'options' => "string"
    },
    'autoControlsCombine' => {
      'desc' => "When slideshow is playing only \"Stop\" control is displayed and vice-versa",
      'default' => "false",
      'options' => "boolean (true / false)"
    },
    'autoControlsSelector' => {
      'desc' => "Element used to populate the auto controls",
      'default' => "null",
      'options' => "jQuery selector"
    }
  },
  'Auto' => {
    'auto' => {
      'desc' => "Slides will automatically transition",
      'default' => "false",
      'options' => "boolean (true / false)"
    },
    'pause' => {
      'desc' => "The amount of time (in ms) between each auto transition",
      'default' => "4000",
      'options' => "integer"
    },
    'autoStart' => {
      'desc' => "Auto show starts playing on load. If <code>false</code>, slideshow will start when the \"Start\" control is clicked",
      'default' => "true",
      'options' => "boolean (true / false)"
    },
    'autoDirection' => {
      'desc' => "The direction of auto show slide transitions",
      'default' => "'next'",
      'options' => "'next', 'prev'"
    },
    'autoHover' => {
      'desc' => "Auto show will pause when mouse hovers over slider",
      'default' => "false",
      'options' => "boolean (true / false)"
    },
    'autoDelay' => {
      'desc' => "Time (in ms) auto show should wait before starting",
      'default' => "0",
      'options' => "integer"
    }
  },
  'Carousel' => {
    'minSlides' => {
      'desc' => "The minimum number of slides to be shown. Slides will be sized down if carousel becomes smaller than the original size.",
      'default' => "1",
      'options' => "integer"
    },
    'maxSlides' => {
      'desc' => "The maximum number of slides to be shown. Slides will be sized up if carousel becomes larger than the original size.",
      'default' => "1",
      'options' => "integer"
    },
    'moveSlides' => {
      'desc' => "The number of slides to move on transition. This value must be <code>>= minSlides</code>, and <code><= maxSlides</code>. If zero (default), the number of fully-visible slides will be used.",
      'default' => "0",
      'options' => "integer"
    },
    'slideWidth' => {
      'desc' => "The width of each slide. This setting is required for all horizontal carousels!",
      'default' => "0",
      'options' => "integer"
    }
  },
  'Callbacks' => {
    'onSliderLoad' => {
      'desc' => "Executes immediately after the slider is fully loaded",
      'default' => "function(){}",
      'options' => "function(){ // your code here }"
    },
    'onSlideBefore' => {
      'desc' => "Executes immediately before each slide transition. Function argument is the target (next) slide element.",
      'default' => "function(){}",
      'options' => "function($slideElement){ // your code here }"
    },
    'onSlideAfter' => {
      'desc' => "Executes immediately after each slide transition. Function argument is the current slide element (when transition completes).",
      'default' => "function(){}",
      'options' => "function($slideElement){ // your code here }"
    },
    'onSlideNext' => {
      'desc' => "Executes immediately before each \"Next\" slide transition. Function argument is the target (next) slide element.",
      'default' => "function(){}",
      'options' => "function($slideElement){ // your code here }"
    },
    'onSlidePrev' => {
      'desc' => "Executes immediately before each \"Prev\" slide transition. Function argument is the target (prev) slide element.",
      'default' => "function(){}",
      'options' => "function($slideElement){ // your code here }"
    }
  },
  'Public methods' => {
    'goToSlide' => {
      'desc' => "Performs a slide transition to the supplied slide index (zero-based)",
      'example' => "slider = $('.bxslider').bxSlider();
slider.goToSlide(3);"
    },
    'goToNextSlide' => {
      'desc' => "Performs a \"Next\" slide transition",
      'example' => "slider = $('.bxslider').bxSlider();
slider.goToNextSlide();"
    },
    'goToPrevSlide' => {
      'desc' => "Performs a \"Prev\" slide transition",
      'example' => "slider = $('.bxslider').bxSlider();
slider.goToPrevSlide();"
    },
    'startAuto' => {
      'desc' => "Starts the auto show. Provide an argument <code>false</code> to prevent the auto controls from being updated.",
      'example' => "slider = $('.bxslider').bxSlider();
slider.startAuto();"
    },
    'stopAuto' => {
      'desc' => "Stops the auto show. Provide an argument <code>false</code> to prevent the auto controls from being updated.",
      'example' => "slider = $('.bxslider').bxSlider();
slider.stopAuto();"
    },
    'getCurrentSlide' => {
      'desc' => "Returns the current active slide",
      'example' => "slider = $('.bxslider').bxSlider();
var current = slider.getCurrentSlide();"
    },
    'getSlideCount' => {
      'desc' => "Returns the total number of slides in the slider",
      'example' => "slider = $('.bxslider').bxSlider();
var slideQty = slider.getSlideCount();"
    }
  }
}

%>

<h1>Options</h1>
<p class="intro">No two projects are the same. That is why bxSlider is packed full of options that allow the slider to adapt to the project’s specific needs. Check the <a href="/examples">examples</a> page for detailed implementations.</p>

<div class="reference-wrap">
  <h3>Quick options reference <span class="icon-icomoon-double-arrow"></span></h3>
  <div class="reference-content clearfix"><div class="reference-content-inner">
    
    <% @options.each do |cat, cat_value| %>
      <div class="col col-<%= cat.downcase %>">
        <h4><%= cat %></h4>
        <ul>
          <% cat_value.each do |name, name_val| %>
            <li><a href="" data-name="<%= name %>"><%= name %></a></li>
          <% end %>
        </ul>
      </div>
    <% end %>
    
  </div></div>
</div>

<% @options.each do |cat, cat_vals| %>
  <div class="category-wrap">
    <h2><%= cat %></h2>
    <% cat_vals.each do |option, option_vals| %>
      <div class="option-name" id="<%= option %>"><%= option %></div>
      <div class="option-desc"><%= option_vals['desc'] %></div>
      <% if option_vals['default'] %>
      <pre><code data-language="javascript">default: <%= option_vals['default'] %>
options: <%= option_vals['options'] %></code></pre>
      <% elsif option_vals['example'] %>
      <pre><code data-language="javascript">example:
<%= option_vals['example'] %></code></pre>
      
      <% end %>
    <% end %>
  </div> 
<% end %>